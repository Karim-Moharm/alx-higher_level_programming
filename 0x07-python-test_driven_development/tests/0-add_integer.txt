The 0-add_integer.py Module Test cases
======================================

``add_integer`` Function
--------------------------------------

'Importing the Module'
>>> add_integer = __import__('0-add_integer').add_integer

'Test cases starts'

'Test #1: two positive integer'  
>>> add_integer(4, 7)
11

'Test #2: a is negative'
>>> add_integer(-12, 2)
-10

'Test #3: b is missing'
>>> add_integer(4)
102

'Test #4: both are missing'
>>> add_integer()
Traceback (most recent call last):
...
TypeError: add_integer() missing 1 required positional argument: 'a'

'Test #5: both arguments are None'
>>> add_integer(None, None)
Traceback (most recent call last):
...
TypeError: a must be an integer

'Test #6: one is None'
>>> add_integer(1, None)
...
TypeError: b must be an integer

'Test #7: both are floats'
>>> add_integer(4.447, 45.87)
49

'Test #8: a is string'
>>> add_integer("str", 7)
...
TypeError: a must be an integer

'Test #9: b is string'
>>> add_integer(124, "str")
...
TypeError: b must be an integer

'Test #10: a is a numeric list'
>>> add_integer(124, [11, 7, 4, 1.24])
Traceback (most recent call last):
...
TypeError: b must be an integer

'Test #11: more than 2 arguments'
>>> add_integer(12, 1, 3)
Traceback (most recent call last):
...
TypeError: add_integer() takes from 1 to 2 positional arguments but 3 were given

'Test #12: a is a boolean'
>>> add_integer(True, 7)
Traceback (most recent call last):
...
TypeError: a must be an integer

'Test #13: b is a boolean'
>>> add_integer(1, False)
...
TypeError: b must be an integer

'Test #14: a is a int tuple'
>>> add_integer((1, 2, 3), 7)
Traceback (most recent call last):
...
TypeError: a must be an integer

'Test #15: a is a char'
>>> add_integer('4', 2)
Traceback (most recent call last):
...
TypeError: a must be an integer
